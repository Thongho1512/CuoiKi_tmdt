spring.application.name=BEphonestore
# Server Configuration
server.port=8080
server.servlet.context-path=/api
server.error.include-message=always
server.error.include-binding-errors=always

# =============================================
# DATABASE CONFIGURATION (SQL Server)
# =============================================
# IMPORTANT: Update these values with your SQL Server credentials

# SQL Server Connection URL
# Format: jdbc:sqlserver://HOST:PORT;databaseName=DATABASE_NAME;encrypt=true;trustServerCertificate=true
spring.datasource.url=jdbc:sqlserver://localhost:1433;databaseName=PhoneStoreDB;encrypt=true;trustServerCertificate=true

# SQL Server Username (default: sa)
spring.datasource.username=sa

# SQL Server Password - CHANGE THIS!
spring.datasource.password=thaithong123

# JDBC Driver
spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver

# Connection Pool Settings
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000

# =============================================
# JPA / HIBERNATE CONFIGURATION
# =============================================
# Hibernate DDL auto (create, create-drop, update, validate, none)
# Use 'update' for development, 'validate' for production
spring.jpa.hibernate.ddl-auto=update

# Show SQL queries in console (disable in production)
spring.jpa.show-sql=true

# Format SQL queries for readability
spring.jpa.properties.hibernate.format_sql=true

# SQL Server Dialect
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.SQLServerDialect

# Timezone handling
spring.jpa.properties.hibernate.jdbc.time_zone=UTC

# Enable lazy loading
spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true


# =============================================
# SPRINGDOC SWAGGER/OPENAPI CONFIGURATION
# =============================================
# Enable Springdoc OpenAPI
springdoc.api-docs.enabled=true

# OpenAPI docs path
springdoc.api-docs.path=/v3/api-docs

# Swagger UI path
springdoc.swagger-ui.enabled=true
springdoc.swagger-ui.path=/swagger-ui.html

# Swagger UI Configuration
springdoc.swagger-ui.operationsSorter=method
springdoc.swagger-ui.tagsSorter=alpha
springdoc.swagger-ui.tryItOutEnabled=true
springdoc.swagger-ui.filter=false
springdoc.swagger-ui.syntaxHighlight.activated=true

# Show actuator endpoints in Swagger (optional)
springdoc.show-actuator=false

# Package to scan for APIs
springdoc.packages-to-scan=com.tmdt.BEphonestore.controller

# Paths to include
springdoc.paths-to-match=/**

# Disable default petstore URL
springdoc.swagger-ui.disable-swagger-default-url=true

# Config URL for Swagger UI
springdoc.swagger-ui.config-url=/api/v3/api-docs/swagger-config
springdoc.api-docs.resolve-schema-properties=true
# Ensure Swagger UI fetches the OpenAPI JSON from the correct absolute path when app runs under /api
springdoc.swagger-ui.url=/api/v3/api-docs

# SWAGGER/OPENAPI FIX
# =============================================
# Content negotiation for Swagger
springdoc.writer-with-default-pretty-printer=true
spring.mvc.pathmatch.matching-strategy=ant_path_matcher

# Disable problematic features
spring.mvc.contentnegotiation.favor-parameter=false
spring.mvc.contentnegotiation.favor-path-extension=false
# =============================================
# JWT CONFIGURATION
# =============================================
# JWT Secret Key - MUST CHANGE IN PRODUCTION!
# Generate a strong random key: openssl rand -base64 64
jwt.secret=8lSRBsHudbfCg5qYjkfT6VRJbQ16Bq40UCfEueQ+toE0LcTwzNAzMKVruKtaypv7CkOdba8vTmlHSNmvXIzvew==

# JWT Token Expiration Time (in milliseconds)
# 86400000 ms = 24 hours
# 604800000 ms = 7 days
jwt.expiration=86400000

# =============================================
# FILE UPLOAD CONFIGURATION
# =============================================
# Enable multipart uploads
spring.servlet.multipart.enabled=true

# Max file size (10MB)
spring.servlet.multipart.max-file-size=10MB

# Max request size (10MB)
spring.servlet.multipart.max-request-size=10MB

# Serve static files từ /uploads
file.upload-dir=./uploads

# CORS cho phép truy cập static files
spring.web.resources.static-locations=file:./uploads/

# =============================================
# EMAIL CONFIGURATION (Gmail SMTP)
# =============================================
# Gmail SMTP Server
spring.mail.host=smtp.gmail.com
spring.mail.port=587

# Gmail Account - CHANGE THESE!
# Your Gmail address
spring.mail.username=thongho1512@gmail.com

# Gmail App Password (NOT your regular password!)
# Generate App Password: https://myaccount.google.com/apppasswords
spring.mail.password=xgxmxwannzpbtywt

# SMTP Properties
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000

# Email Settings
app.email.from=noreply@phonestore.com
app.email.from-name=Phone Store

# Test email (optional)
spring.mail.test-connection=false

# =============================================
# PAYPAL CONFIGURATION
# =============================================
# PayPal Mode (sandbox for testing, live for production)
paypal.mode=sandbox

# PayPal Client ID - Get from https://developer.paypal.com/
paypal.client-id=Af-HAqUHaq1aHYek68UYGAAmpLL3ZeyFUw6JT9_RrMtxLxXFW_3KiJujpxlcmk4P_WO6-QSU2LxdC7AJ

# PayPal Client Secret
paypal.client-secret=EF9sBmInEiGKBdwMGEp20MyFwETqcMcs01kl1_QRNEwB_W3cQppVcwZejGQbcthJhExRZG1tUGHUCEFs

# PayPal API Base URL (set automatically based on mode)
# Sandbox: https://api.sandbox.paypal.com
# Live: https://api.paypal.com



# =============================================
# LOGGING CONFIGURATION
# =============================================
# Root logging level
logging.level.root=INFO

# Application logging level
logging.level.com.phonestore=DEBUG

# Spring Security logging
logging.level.org.springframework.security=DEBUG

# Hibernate SQL logging
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# Log file configuration
logging.file.name=logs/phone-store.log
logging.file.max-size=10MB
logging.file.max-history=30
logging.file.total-size-cap=100MB

# Log pattern
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

# =============================================
# THYMELEAF CONFIGURATION (For Email Templates)
# =============================================
# Disable cache in development
spring.thymeleaf.cache=false

# Template location
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html

# Template mode
spring.thymeleaf.mode=HTML

# Template encoding
spring.thymeleaf.encoding=UTF-8

# Check template location
spring.thymeleaf.check-template-location=true

# =============================================
# JACKSON CONFIGURATION (JSON Serialization)
# =============================================
# Timezone for JSON dates
spring.jackson.time-zone=UTC

# Date format
spring.jackson.date-format=yyyy-MM-dd'T'HH:mm:ss.SSSZ

# Don't write dates as timestamps
spring.jackson.serialization.write-dates-as-timestamps=false

# Fail on empty beans
spring.jackson.serialization.fail-on-empty-beans=false

# Fail on unknown properties
spring.jackson.deserialization.fail-on-unknown-properties=false

# =============================================
# ACTUATOR CONFIGURATION (Optional - for monitoring)
# =============================================
# Enable actuator endpoints
management.endpoints.web.exposure.include=health,info,metrics

# Actuator base path
management.endpoints.web.base-path=/actuator

# Health endpoint details
management.endpoint.health.show-details=when-authorized

# =============================================
# APPLICATION CUSTOM PROPERTIES
# =============================================
# Frontend Base URL (for email links)
app.base-url=http://localhost:3000

# Application Name
app.name=Phone Store

# Application Version
app.version=1.0.0

# Admin Default Credentials (for initial setup)
app.admin.username=admin
app.admin.password=admin123
app.admin.email=admin@phonestore.com

# =============================================
# SECURITY CONFIGURATION
# =============================================
# Enable SQL injection protection
spring.jpa.properties.hibernate.use_sql_comments=false

# Disable default error page
server.error.whitelabel.enabled=false

# =============================================
# PERFORMANCE TUNING
# =============================================
# Enable HTTP/2
server.http2.enabled=true

# Enable compression
server.compression.enabled=true
server.compression.mime-types=text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
server.compression.min-response-size=1024

# Connection timeout
server.tomcat.connection-timeout=20000

# Maximum threads
server.tomcat.threads.max=200

# Minimum spare threads
server.tomcat.threads.min-spare=10

# =============================================
# PROFILE-SPECIFIC CONFIGURATIONS
# =============================================
# Active profile (dev, prod)
spring.profiles.active=dev

# =============================================
# NOTES:
# =============================================
# 1. MUST CHANGE in production:
#    - jwt.secret (generate strong random key)
#    - spring.datasource.password
#    - spring.mail.username and spring.mail.password
#    - paypal.client-id and paypal.client-secret
#    - app.cors.allowed-origins (your production domain)
#
# 2. For Gmail:
#    - Enable 2-Step Verification
#    - Generate App Password at: https://myaccount.google.com/apppasswords
#    - Use App Password (16 digits) NOT your regular password
#
# 3. For PayPal:
#    - Create Sandbox account: https://developer.paypal.com/
#    - Get Client ID and Secret from your app
#    - Switch to 'live' mode in production
#
# 4. SQL Server:
#    - Ensure SQL Server is running
#    - Database 'PhoneStoreDB' must exist (run SQL script first)
#    - Enable TCP/IP and SQL Server Authentication
#    - Configure firewall to allow port 1433
#
# 5. File Uploads:
#    - Create 'uploads' directory in project root
#    - Ensure write permissions
#    - For production, consider using cloud storage (S3, Azure Blob)
#
# 6. Security:
#    - Change all default passwords
#    - Use HTTPS in production
#    - Configure proper CORS origins
#    - Enable rate limiting (consider Spring Security)
#    - Regular security updates
# =============================================